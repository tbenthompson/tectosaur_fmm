test fmm with elastic kernels more, this is confusing... 
i think there are a variety of issues here.
-- first, with single precision, nearfield computations get messed up because the 1 / r^2 or 1/r^3 has numerical precision issues
-- second, i think there is some kind of subtle difference between the results of the autogenerated kernel and the hand written optimized elastic kernels. this difference mostly pops up in
-- this is a big problem because if the kernels differ sufficiently, then 1) they are wrong and 2) i need to use the same ones everywhere... WHAT IS PROBLEM HERE?

test laplace single layer and laplace hypersingular
optimize gpu kernels
2D fmm
uniform octree to speed up fmm setup and standardize some of the translation kernels.

move fmm_integral_op into this package

use FMM for okada
-- just try it out first, make sure its accurate.

read about the implementation of the high-performance volumetric integration tools.

why didn't the fft stuff work for the m2l in the past?
https://stackoverflow.com/questions/18384054/what-are-the-downsides-of-convolution-by-fft-compared-to-realspace-convolution

reading exafmm stuff is interesting: https://github.com/exafmm/exafmm-alpha/blob/master/gpu/traversal.h

