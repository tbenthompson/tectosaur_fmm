
#include <cmath>
#include <iostream>
#include "fmm_kernels.hpp"

#define Real double

template <typename F>
void direct_nbody(const NBodyProblem& p, double* out, const F& f) {
    for (size_t i = 0; i < p.n_obs; i++) {
        for (size_t j = 0; j < p.n_src; j++) {
            out[i * p.n_src + j] = f(p.obs_pts[i], p.obs_ns[i], p.src_pts[j], p.src_ns[j]);
        }
    }
}

template <typename F>
void mf_direct_nbody(const NBodyProblem& p, double* out, double* in, const F& f) {
    for (size_t i = 0; i < p.n_obs; i++) {
        for (size_t j = 0; j < p.n_src; j++) {
            out[i] += f(p.obs_pts[i], p.obs_ns[i], p.src_pts[j], p.src_ns[j]) * in[j];
        }
    }
}

void one(const NBodyProblem& p, double* out) {
    direct_nbody(p, out, [](const Vec3&, const Vec3&, const Vec3&, const Vec3&) {
        return 1.0; 
    });
}

void mf_one(const NBodyProblem& p, double* out, double* in) {
    mf_direct_nbody(p, out, in, [](const Vec3&, const Vec3&, const Vec3&, const Vec3&) {
        return 1.0; 
    });
}

void invr(const NBodyProblem& p, double* out) {
    direct_nbody(p, out,
        [](const Vec3& obs, const Vec3& nobs, const Vec3& src, const Vec3& nsrc) {
            auto r = hypot(sub(obs, src));
            if (r == 0.0) {
                return 0.0;
            }
            return 1.0 / r;
        });
}

void mf_invr(const NBodyProblem& p, double* out, double* in) {
    mf_direct_nbody(p, out, in,
        [](const Vec3& obs, const Vec3& nobs, const Vec3& src, const Vec3& nsrc) {
            auto r = hypot(sub(obs, src));
            if (r == 0.0) {
                return 0.0;
            }
            return 1.0 / r;
        });
}

void tensor_invr(const NBodyProblem& p, double* out) {
    for (size_t i = 0; i < p.n_obs; i++) {
        for (size_t j = 0; j < p.n_src; j++) {
            auto inv_r = 1.0 / hypot(sub(p.obs_pts[i], p.src_pts[j]));
            for (int d1 = 0; d1 < 3; d1++) {
                for (int d2 = 0; d2 < 3; d2++) {
                    auto row = i * 3 + d1;
                    auto col = j * 3 + d2;
                    out[row * (p.n_src * 3) + col] = inv_r;
                }
            }
        }
    }
}

void mf_tensor_invr(const NBodyProblem& p, double* out, double* in) {
    for (size_t i = 0; i < p.n_obs; i++) {
        for (size_t j = 0; j < p.n_src; j++) {
            auto inv_r = 1.0 / hypot(sub(p.obs_pts[i], p.src_pts[j]));
            for (int d1 = 0; d1 < 3; d1++) {
                for (int d2 = 0; d2 < 3; d2++) {
                    auto row = i * 3 + d1;
                    auto col = j * 3 + d2;
                    out[row] += inv_r * in[col];
                }
            }
        }
    }
}

void laplace_double(const NBodyProblem& p, double* out) {
    direct_nbody(p, out,
        [](const Vec3& obs, const Vec3& nobs, const Vec3& src, const Vec3& nsrc) {
            auto delta = sub(obs, src);
            auto r = hypot(delta);
            return dot(delta, nsrc) / (4 * M_PI * r * r * r);
        }
    );
}

void mf_laplace_double(const NBodyProblem& p, double* out, double* in) {
    mf_direct_nbody(p, out, in,
        [](const Vec3& obs, const Vec3& nobs, const Vec3& src, const Vec3& nsrc) {
            auto delta = sub(obs, src);
            auto r = hypot(delta);
            return dot(delta, nsrc) / (4 * M_PI * r * r * r);
        }
    );
}





void elasticU(const NBodyProblem& p, double* out) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 2] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 2] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 2] = 0.0;
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 0] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(3.0))+(((float(-4.0))*(nu)))+(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))))));
            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 1] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy))))));
            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 2] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 0] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 1] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(3.0))+(((float(-4.0))*(nu)))+(((((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 2] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 0] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 1] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 2] = 
                ((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(3.0))+(((float(-4.0))*(nu)))+(((((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))))));
        }
    }
}

void mf_elasticU(const NBodyProblem& p, double* out, double* in) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            out[i * 3 + 0] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(3.0))+(((float(-4.0))*(nu)))+(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 0] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy))))))) * in[j * 3 + 1];
            out[i * 3 + 0] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz))))))) * in[j * 3 + 2];
            out[i * 3 + 1] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy))))))) * in[j * 3 + 0];
            out[i * 3 + 1] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(3.0))+(((float(-4.0))*(nu)))+(((((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 1] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz))))))) * in[j * 3 + 2];
            out[i * 3 + 2] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz))))))) * in[j * 3 + 0];
            out[i * 3 + 2] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz))))))) * in[j * 3 + 1];
            out[i * 3 + 2] += (((float(0.0625))*((float(1) / (float(M_PI))))*((float(1) / (G)))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(3.0))+(((float(-4.0))*(nu)))+(((((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))))))) * in[j * 3 + 2];
        }
    }
}

void elasticT(const NBodyProblem& p, double* out) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 2] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 2] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 2] = 0.0;
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 0] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 1] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 2] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-1.0))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 0] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((ly)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 1] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 2] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((ly)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-1.0))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 0] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lz)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 1] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lz)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 2] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
        }
    }
}

void mf_elasticT(const NBodyProblem& p, double* out, double* in) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            out[i * 3 + 0] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 0] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 0] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-1.0))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 2];
            out[i * 3 + 1] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((ly)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 1] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 1] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((ly)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-1.0))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 2];
            out[i * 3 + 2] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lz)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 2] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lz)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 2] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 2];
        }
    }
}

void elasticA(const NBodyProblem& p, double* out) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 2] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 2] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 2] = 0.0;
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 0] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((float(-1.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 1] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((nx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 2] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((nx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-1.0))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 0] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((ny)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 1] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((float(-1.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 2] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((ny)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-1.0))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 0] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((nz)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 1] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((nz)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 2] = 
                ((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((float(-1.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))));
        }
    }
}

void mf_elasticA(const NBodyProblem& p, double* out, double* in) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            out[i * 3 + 0] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((float(-1.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 0] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((nx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 0] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((nx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-1.0))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 2];
            out[i * 3 + 1] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((ny)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 1] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((float(-1.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 1] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((ny)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-1.0))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 2];
            out[i * 3 + 2] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((nz)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 2] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((nz)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 2] += (((float(-0.125))*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((((float(1.0))+(((float(-2.0))*(nu)))))*(((((float(-1.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-1.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-1.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))) * in[j * 3 + 2];
        }
    }
}

void elasticH(const NBodyProblem& p, double* out) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 2] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 2] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 0] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 1] = 0.0;
                out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 2] = 0.0;
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 0] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((float(2.0))*(lx)*(nx)))+((((float(1) / (nu)))*(((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(3.0))*(((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((float(1.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(1.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 1] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((lx)*(ny)))+(((ly)*(nx)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((ly)*(nx)))+(((float(-1.0))*(lx)*(ny)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(0.5))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(0.5))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-0.5))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-0.5))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
            out[i * p.n_src * 9 + 0 * 3 * p.n_src + j * 3 + 2] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((lx)*(nz)))+(((lz)*(nx)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((lz)*(nx)))+(((float(-1.0))*(lx)*(nz)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-0.5))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-0.5))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 0] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((lx)*(ny)))+(((ly)*(nx)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((lx)*(ny)))+(((float(-1.0))*(ly)*(nx)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(0.5))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(0.5))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-0.5))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-0.5))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 1] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((float(2.0))*(ly)*(ny)))+((((float(1) / (nu)))*(((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(3.0))*(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((float(1.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(1.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
            out[i * p.n_src * 9 + 1 * 3 * p.n_src + j * 3 + 2] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((ly)*(nz)))+(((lz)*(ny)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((lz)*(ny)))+(((float(-1.0))*(ly)*(nz)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-0.5))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-0.5))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 0] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((lx)*(nz)))+(((lz)*(nx)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((lx)*(nz)))+(((float(-1.0))*(lz)*(nx)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-0.5))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-0.5))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 1] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((ly)*(nz)))+(((lz)*(ny)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((ly)*(nz)))+(((float(-1.0))*(lz)*(ny)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-0.5))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-0.5))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
            out[i * p.n_src * 9 + 2 * 3 * p.n_src + j * 3 + 2] = 
                ((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((float(2.0))*(lz)*(nz)))+((((float(1) / (nu)))*(((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(3.0))*(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((float(1.0))*(lz)*(((yz)+(((float(-1.0))*(xz)))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(1.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))));
        }
    }
}

void mf_elasticH(const NBodyProblem& p, double* out, double* in) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            out[i * 3 + 0] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((float(2.0))*(lx)*(nx)))+((((float(1) / (nu)))*(((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(3.0))*(((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((float(1.0))*(lx)*(((yx)+(((float(-1.0))*(xx)))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(1.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 0] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((lx)*(ny)))+(((ly)*(nx)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((ly)*(nx)))+(((float(-1.0))*(lx)*(ny)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(0.5))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(0.5))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-0.5))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-0.5))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 0] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((lx)*(nz)))+(((lz)*(nx)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((lz)*(nx)))+(((float(-1.0))*(lx)*(nz)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-0.5))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-0.5))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 2];
            out[i * 3 + 1] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((lx)*(ny)))+(((ly)*(nx)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((lx)*(ny)))+(((float(-1.0))*(ly)*(nx)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(0.5))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(0.5))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(ly)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-0.5))*(lx)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(ny)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-0.5))*(nx)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yy)+(((float(-1.0))*(xy)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 1] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((float(2.0))*(ly)*(ny)))+((((float(1) / (nu)))*(((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(3.0))*(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((float(1.0))*(ly)*(((yy)+(((float(-1.0))*(xy)))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(1.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 1] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((ly)*(nz)))+(((lz)*(ny)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((lz)*(ny)))+(((float(-1.0))*(ly)*(nz)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-0.5))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(-0.5))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 2];
            out[i * 3 + 2] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((lx)*(nz)))+(((lz)*(nx)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((lx)*(nz)))+(((float(-1.0))*(lz)*(nx)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(lz)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-0.5))*(lx)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(nz)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(-0.5))*(nx)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yx)+(((float(-1.0))*(xx)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 0];
            out[i * 3 + 2] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((ly)*(nz)))+(((lz)*(ny)))+((((float(1) / (nu)))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((ly)*(nz)))+(((float(-1.0))*(lz)*(ny)))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((((((float(0.5))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((((((float(0.5))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))+(((float(0.5))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(-1.0))+(((float(3.0))*(nu)))))*(((((((((float(0.5))*(lz)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-0.5))*(ly)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(-1.0))*(((((float(0.5))*(nz)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(-0.5))*(ny)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((yy)+(((float(-1.0))*(xy)))))*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 1];
            out[i * 3 + 2] += (((float(0.25))*(G)*(nu)*((float(1) / (float(M_PI))))*((float(1) / (((float(1.0))+(((float(-1.0))*(nu)))))))*((float(1) / sqrt((((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))) * (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz))))))))))))*(((((float(2.0))*(lz)*(nz)))+((((float(1) / (nu)))*(((float(1.0))+(((float(-2.0))*(nu)))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))))))+((((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((float(3.0))*(nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((float(3.0))*(ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((float(3.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(3.0))*(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(nx)))+(((ly)*(ny)))+(((lz)*(nz)))+(((float(-5.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz)))))))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))))))+(((float(3.0))*((float(1) / (nu)))*((float(1) / (((((((yx)+(((float(-1.0))*(xx))))) * (((yx)+(((float(-1.0))*(xx)))))))+(((((yy)+(((float(-1.0))*(xy))))) * (((yy)+(((float(-1.0))*(xy)))))))+(((((yz)+(((float(-1.0))*(xz))))) * (((yz)+(((float(-1.0))*(xz)))))))))))*(((float(1.0))+(((float(-1.0))*(nu)))))*(((((float(1.0))*(lz)*(((yz)+(((float(-1.0))*(xz)))))*(((((nx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ny)*(((yy)+(((float(-1.0))*(xy)))))))+(((nz)*(((yz)+(((float(-1.0))*(xz)))))))))))+(((float(1.0))*(nz)*(((yz)+(((float(-1.0))*(xz)))))*(((((lx)*(((yx)+(((float(-1.0))*(xx)))))))+(((ly)*(((yy)+(((float(-1.0))*(xy)))))))+(((lz)*(((yz)+(((float(-1.0))*(xz))))))))))))))))))) * in[j * 3 + 2];
        }
    }
}


Kernel get_by_name(std::string name) {
    if (name == "one") {
        return {one, mf_one, 1};
    } else if (name == "invr") {
        return {invr, mf_invr, 1};
    } else if (name == "tensor_invr") {
        return {tensor_invr, mf_tensor_invr, 3};
    } else if (name == "laplace_double") {
        return {laplace_double, mf_laplace_double, 1};   
    } else if (name == "elasticU") {
        return {elasticU, mf_elasticU, 3};
    } else if (name == "elasticT") {
        return {elasticT, mf_elasticT, 3};
    } else if (name == "elasticA") {
        return {elasticA, mf_elasticA, 3};
    } else if (name == "elasticH") {
        return {elasticH, mf_elasticH, 3};
    } else {
        throw std::runtime_error("invalid kernel name");
    }
}
