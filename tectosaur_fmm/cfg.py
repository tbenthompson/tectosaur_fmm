import numpy as np
import os

from cppimport import setup_pybind11

import tectosaur
import tectosaur_fmm
from tectosaur.util.gpu import np_to_c_type

float_type = np.float32
gpu_float_type = np_to_c_type(float_type)

def template_kernels(cfg):
    import mako.template
    import mako.exceptions

    #TODO: GENERALIZE THIS?
    templates = ['fmm_kernels.thpp', 'fmm_kernels.tcpp']

    fmm_dir = tectosaur_fmm.source_dir
    for t in templates:
        cfg['dependencies'].append(os.path.join(fmm_dir, t))
        filepath = os.path.join(fmm_dir, t)
        tmpl = mako.template.Template(filename = filepath)
        try:
            code = tmpl.render()
        except Exception as e:
            raise e
        dirname = os.path.dirname(t)
        filename, ext = os.path.splitext(t)
        out_filename = os.path.join(fmm_dir, filename + '.' + ext[2:])
        print(out_filename)
        with open(out_filename, 'w') as f:
            f.write(code)

    with open(os.path.join(fmm_dir, '.gitignore'), 'w') as f:
        f.write('# autogenerated. please do not modify\n')
        f.write('.gitignore\n')
        for t in templates:
            filename,ext = os.path.splitext(t)
            f.write(filename + '.' + ext[2:] + '\n')

def numpy_blas_cfg(cfg):
    import numpy as np
    blas = np.__config__.blas_opt_info
    cfg['library_dirs'] += blas['library_dirs']
    cfg['libraries'] += blas['libraries']

def to_fmm_dir(filenames):
    return [os.path.join(tectosaur_fmm.source_dir, fname) for fname in filenames]

def lib_cfg(cfg):
    setup_pybind11(cfg)
    cfg['compiler_args'] += ['-std=c++14', '-O3', '-g', '-Wall', '-Werror', '-fopenmp']
    cfg['sources'] += to_fmm_dir([
        'fmm_impl.cpp', 'kdtree.cpp', 'blas_wrapper.cpp', 'fmm_kernels.cpp'
    ])
    cfg['dependencies'] += to_fmm_dir([
        'fmm_impl.hpp', 'octree.hpp', 'kdtree.hpp', 'blas_wrapper.hpp',
        os.path.join(tectosaur.source_dir, 'include', 'pybind11_nparray.hpp'),
        'cfg.py'
    ])
    cfg['parallel'] = True
    cfg['linker_args'] += ['-fopenmp']
    cfg['include_dirs'] += [tectosaur.source_dir]
    numpy_blas_cfg(cfg)
    template_kernels(cfg)


def test_cfg(cfg):
    lib_cfg(cfg)
    cfg['sources'] += ['test_blas.cpp', 'test_misc.cpp', 'test_octree.cpp']
    cfg['dependencies'] += ['test_helpers.hpp', 'doctest.h']
    cfg['include_dirs'] += [tectosaur_fmm.source_dir]
    template_kernels(cfg)
