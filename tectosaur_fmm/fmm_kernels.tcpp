<%
import tectosaur.kernels.kernel_exprs as kernel_exprs
kernel_names = ['U', 'T', 'A', 'H']
kernels = kernel_exprs.get_kernels()
%>
#include <cmath>
#include <iostream>
#include "fmm_kernels.hpp"

#define Real double

template <typename F>
void direct_nbody(const NBodyProblem& p, double* out, const F& f) {
    for (size_t i = 0; i < p.n_obs; i++) {
        for (size_t j = 0; j < p.n_src; j++) {
            out[i * p.n_src + j] = f(p.obs_pts[i], p.obs_ns[i], p.src_pts[j], p.src_ns[j]);
        }
    }
}

template <typename F>
void mf_direct_nbody(const NBodyProblem& p, double* out, double* in, const F& f) {
    for (size_t i = 0; i < p.n_obs; i++) {
        for (size_t j = 0; j < p.n_src; j++) {
            out[i] += f(p.obs_pts[i], p.obs_ns[i], p.src_pts[j], p.src_ns[j]) * in[j];
        }
    }
}

void one(const NBodyProblem& p, double* out) {
    direct_nbody(p, out, [](const Vec3&, const Vec3&, const Vec3&, const Vec3&) {
        return 1.0; 
    });
}

void mf_one(const NBodyProblem& p, double* out, double* in) {
    mf_direct_nbody(p, out, in, [](const Vec3&, const Vec3&, const Vec3&, const Vec3&) {
        return 1.0; 
    });
}

void invr(const NBodyProblem& p, double* out) {
    direct_nbody(p, out,
        [](const Vec3& obs, const Vec3& nobs, const Vec3& src, const Vec3& nsrc) {
            auto r = hypot(sub(obs, src));
            if (r == 0.0) {
                return 0.0;
            }
            return 1.0 / r;
        });
}

void mf_invr(const NBodyProblem& p, double* out, double* in) {
    mf_direct_nbody(p, out, in,
        [](const Vec3& obs, const Vec3& nobs, const Vec3& src, const Vec3& nsrc) {
            auto r = hypot(sub(obs, src));
            if (r == 0.0) {
                return 0.0;
            }
            return 1.0 / r;
        });
}

void tensor_invr(const NBodyProblem& p, double* out) {
    for (size_t i = 0; i < p.n_obs; i++) {
        for (size_t j = 0; j < p.n_src; j++) {
            auto inv_r = 1.0 / hypot(sub(p.obs_pts[i], p.src_pts[j]));
            for (int d1 = 0; d1 < 3; d1++) {
                for (int d2 = 0; d2 < 3; d2++) {
                    auto row = i * 3 + d1;
                    auto col = j * 3 + d2;
                    out[row * (p.n_src * 3) + col] = inv_r;
                }
            }
        }
    }
}

void mf_tensor_invr(const NBodyProblem& p, double* out, double* in) {
    for (size_t i = 0; i < p.n_obs; i++) {
        for (size_t j = 0; j < p.n_src; j++) {
            auto inv_r = 1.0 / hypot(sub(p.obs_pts[i], p.src_pts[j]));
            for (int d1 = 0; d1 < 3; d1++) {
                for (int d2 = 0; d2 < 3; d2++) {
                    auto row = i * 3 + d1;
                    auto col = j * 3 + d2;
                    out[row] += inv_r * in[col];
                }
            }
        }
    }
}

void laplace_double(const NBodyProblem& p, double* out) {
    direct_nbody(p, out,
        [](const Vec3& obs, const Vec3& nobs, const Vec3& src, const Vec3& nsrc) {
            auto delta = sub(obs, src);
            auto r = hypot(delta);
            return dot(delta, nsrc) / (4 * M_PI * r * r * r);
        }
    );
}

void mf_laplace_double(const NBodyProblem& p, double* out, double* in) {
    mf_direct_nbody(p, out, in,
        [](const Vec3& obs, const Vec3& nobs, const Vec3& src, const Vec3& nsrc) {
            auto delta = sub(obs, src);
            auto r = hypot(delta);
            return dot(delta, nsrc) / (4 * M_PI * r * r * r);
        }
    );
}

<%def name="kernel_fnc(k_name)">\
void elastic${k_name}(const NBodyProblem& p, double* out) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                % for d1 in range(3):
                % for d2 in range(3):
                out[i * p.n_src * 9 + ${d1} * 3 * p.n_src + j * 3 + ${d2}] = 0.0;
                % endfor
                % endfor
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            % for d1 in range(3):
            % for d2 in range(3):
            out[i * p.n_src * 9 + ${d1} * 3 * p.n_src + j * 3 + ${d2}] = 
                ${kernels[k_name]['expr'][d1][d2]};
            % endfor
            % endfor
        }
    }
}
</%def>

<%def name="mf_kernel_fnc(k_name)">\
void mf_elastic${k_name}(const NBodyProblem& p, double* out, double* in) {
    auto G = p.kernel_args[0];
    auto nu = p.kernel_args[1];
    (void)G;(void)nu;
    for (size_t i = 0; i < p.n_obs; i++) {
        auto xx = p.obs_pts[i][0];
        auto xy = p.obs_pts[i][1];
        auto xz = p.obs_pts[i][2];
        (void)xx;(void)xy;(void)xz;

        auto nx = p.obs_ns[i][0];
        auto ny = p.obs_ns[i][1];
        auto nz = p.obs_ns[i][2];
        (void)nx;(void)ny;(void)nz;
        for (size_t j = 0; j < p.n_src; j++) {

            auto yx = p.src_pts[j][0];
            auto yy = p.src_pts[j][1];
            auto yz = p.src_pts[j][2];
            (void)yx;(void)yy;(void)yz;

            // If the src to obs distance is 0, then the output is just 0.
            auto Dx = xx - yx;
            auto Dy = xy - yy;
            auto Dz = xz - yz;
            auto R2 = Dx * Dx + Dy * Dy + Dz * Dz;
            if (R2 == 0.0) {
                continue;
            }

            auto lx = p.src_ns[j][0];
            auto ly = p.src_ns[j][1];
            auto lz = p.src_ns[j][2];
            (void)lx;(void)ly;(void)lz;

            % for d1 in range(3):
            % for d2 in range(3):
            out[i * 3 + ${d1}] += (${kernels[k_name]['expr'][d1][d2]}) * in[j * 3 + ${d2}];
            % endfor
            % endfor
        }
    }
}
</%def>

% for k_name in kernel_names:
${kernel_fnc(k_name)}
${mf_kernel_fnc(k_name)}
% endfor

Kernel get_by_name(std::string name) {
    if (name == "one") {
        return {one, mf_one, 1};
    } else if (name == "invr") {
        return {invr, mf_invr, 1};
    } else if (name == "tensor_invr") {
        return {tensor_invr, mf_tensor_invr, 3};
    } else if (name == "laplace_double") {
        return {laplace_double, mf_laplace_double, 1};   
    % for k_name in kernel_names:
    } else if (name == "elastic${k_name}") {
        return {elastic${k_name}, mf_elastic${k_name}, 3};
    % endfor
    } else {
        throw std::runtime_error("invalid kernel name");
    }
}
